{"name":"httperr","tagline":"HTTP status codes as JavaScript errors","body":"# Synopsis\r\n\r\n**httperr** provides Error types for all HTTP error status codes.\r\n\r\n[![stability 3 - stable](http://b.repl.ca/v1/stability-3_--_stable-yellowgreen.png)\r\n](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/httperr)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/httperr.png?branch=master)](https://travis-ci.org/pluma/httperr) [![Coverage Status](https://coveralls.io/repos/pluma/httperr/badge.png?branch=master)](https://coveralls.io/r/pluma/httperr?branch=master) [![Dependencies](https://david-dm.org/pluma/httperr.png?theme=shields.io)](https://david-dm.org/pluma/httperr)\r\n\r\n[![NPM status](https://nodei.co/npm/httperr.png?compact=true)](https://npmjs.org/package/httperr)\r\n\r\n# Why?\r\n\r\nThere are several libraries that already do this, but most of them either only support a very limited number of status codes, don't capture stack traces correctly or are no longer maintained.\r\n\r\nThe biggest difference in **httperr** is that it lets you attach relevant information for the error in a single function call, allowing you to separate your error handling and error response logic without losing the semantics of HTTP status codes.\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install httperr\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/httperr.git\r\ncd httperr\r\nnpm install\r\n```\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar httperr = require('httperr');\r\n\r\nvar err = httperr[404]('The path \"/example\" could not be resolved');\r\nconsole.log(err);\r\n/*\r\n{ [NotFound: The path \"/example\" could not be resolved]\r\n  title: 'Not Found',\r\n  name: 'NotFound',\r\n  code: 'NOT_FOUND',\r\n  statusCode: 404,\r\n  message: 'The path \"/example\" could not be resolved'\r\n}\r\n*/\r\nthrow err;\r\n/*\r\nNotFound: The path \"/example\" could not be resolved\r\n    at ...\r\n*/\r\n\r\nconsole.log(httperr.methodNotAllowed({allowed: ['GET', 'POST']}));\r\n/*\r\n{ [MethodNotAllowed]\r\n  title: 'Method Not Allowed',\r\n  name: 'MethodNotAllowed',\r\n  code: 'METHOD_NOT_ALLOWED',\r\n  statusCode: 405,\r\n  message: '',\r\n  allowed: ['GET', 'POST']\r\n}\r\n*/\r\n\r\nerr = new httperr.NotFound();\r\nconsole.log(err);\r\n/*\r\n{ [NotFound]\r\n  title: 'Not Found',\r\n  name: 'NotFound',\r\n  code: 'NOT_FOUND',\r\n  statusCode: 404,\r\n  message: 'The path \"/example\" could not be resolved'\r\n}\r\n*/\r\n\r\nconsole.log(err instanceof httperr.NotFound); // true\r\nconsole.log(err instanceof httperr.notFound); // true\r\nconsole.log(err instanceof httperr['404']); // true\r\nconsole.log(err instanceof httperr.MethodNotAllowed); // false\r\nconsole.log(err instanceof httperr.HttpError); // true\r\nconsole.log(err instanceof Error); // true\r\n```\r\n\r\n# API\r\n\r\n## new httperr.{ErrorName}([config:Object]):Error\r\n\r\nCreates an Error object. The `new` keyword is optional.\r\n\r\nExample:\r\n\r\n```javascript\r\nnew httperr.NotFound({message: 'That does not exist'});\r\n```\r\n\r\nIf `config` is a string, it will be treated as `config.message`.\r\n\r\nIf `config` is an `Error` object, it will be treated as `config.cause`.\r\n\r\nIf `config` is an object, it can have the following properties:\r\n\r\n### config.message (optional)\r\nA descriptive human-readable title describing the error's cause.\r\n\r\n### config.cause (optional)\r\nThe underlying exception that caused the HTTP error.\r\n\r\n### config.details (optional)\r\nA detailed human-readable description of the error's cause and possible solutions.\r\n\r\n### config.allowed (optional)\r\nThe methods allowed for this URL.\r\n\r\nThis property is only available for `405 Method Not Allowed` errors and can be used to populate the `Allow` header.\r\n\r\n### config.retryAfter (optional)\r\nThe minimum delay before the request should be attempted again.\r\n\r\nThis property is only available for `429 Too Many Requests` and `420 Enhance Your Calm` (Twitter API) errors and can be used to populate the `Retry-After` header.\r\n\r\n### config.parameters (optional)\r\nThe parameters with which the request should be retried.\r\n\r\nThis property is only available for `449 Retry With` (Microsoft) errors and can be used to populate the response status message.\r\n\r\n### config.location (optional)\r\nThe location for which the request should be repeated.\r\n\r\nThis property is only available for `451 Redirect` (Microsoft) errors and can be used to populate the proprietary `X-MS-Location` response header.\r\n\r\n## httperr.{statusCode}(config:Object):Error\r\n\r\nSee above.\r\n\r\nExample:\r\n\r\n```javascript\r\nhttperr[404]({message: 'That does not exist either'});\r\n```\r\n\r\n## httperr.{errorName}([config:Object]):Error\r\n\r\nSee above.\r\n\r\nExample:\r\n\r\n```javascript\r\nhttperr.notFound({message: 'This link is dead, too'})\r\n```\r\n\r\n## httperr.createHttpError(status, title, [init]):Function\r\nCreates a new error type for the given HTTP error status.\r\n\r\nTakes the following arguments:\r\n\r\n### title\r\nA human-readable title for the HTTP error.\r\n\r\n### status\r\nThe HTTP response status code for the HTTP error.\r\n\r\n### init (optional)\r\nA function which will be invoked as a method of the new error with the `config` argument immediately after the error is created by the factory. Can be used to process additional error-specific configuration parameters.\r\n\r\n## new httperr.HttpError(config)\r\n\r\nThe base type for all `httperr` error types. You probably don't want to use this directly.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/httperr/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}